---
- name: Upload K3s cluster context to HashiCorp Vault
  hosts: server
  gather_facts: true # Enabled to get ansible_default_ipv4
  vars:
    # K3s cluster connection details
    kubeconfig_source: "/etc/rancher/k3s/k3s.yaml"

    # Vault connection details
    vault_addr: "https://vault.horna.local"
    vault_role_id: "{{ vault_approle_role_id }}"
    vault_secret_id: "{{ vault_approle_secret_id }}"
    vault_approle_mount_point: "approle"
    vault_secret_path: "K3S-Cluster-Access"
    vault_cluster_prefix: "k3s"

    # Local temporary file location
    temp_kubeconfig_path: "/tmp/k3s-kubeconfig.yaml"

  tasks:
    - name: Set cluster name based on IP
      ansible.builtin.set_fact:
        vault_cluster_name: "{{ vault_cluster_prefix }}-{{ ansible_default_ipv4.address | regex_replace('\\.', '-') }}"

    - name: Debug cluster name
      ansible.builtin.debug:
        var: vault_cluster_name

    - name: Check if kubeconfig exists
      ansible.builtin.stat:
        path: "{{ kubeconfig_source }}"
      register: kubeconfig_stat
      become: true

    - name: Validate kubeconfig exists
      ansible.builtin.assert:
        that:
          - kubeconfig_stat.stat.exists
        fail_msg: "Kubeconfig file not found at {{ kubeconfig_source }}"

    - name: Create temporary kubeconfig with correct server address
      ansible.builtin.shell: |
        sed "s/127.0.0.1/{{ ansible_host }}/g" {{ kubeconfig_source }} > {{ temp_kubeconfig_path }}
      args:
        executable: /bin/bash
      register: kubeconfig_result
      become: true
      changed_when: false

    - name: Check if temporary kubeconfig was created
      ansible.builtin.stat:
        path: "{{ temp_kubeconfig_path }}"
      register: temp_kubeconfig_stat

    - name: Validate kubeconfig was created
      ansible.builtin.assert:
        that:
          - kubeconfig_result.rc == 0
          - temp_kubeconfig_stat.stat.exists
        fail_msg: "Failed to create temporary kubeconfig"

    - name: Authenticate to Vault using AppRole
      ansible.builtin.uri:
        url: "{{ vault_addr }}/v1/auth/{{ vault_approle_mount_point }}/login"
        method: POST
        body_format: json
        body:
          role_id: "{{ vault_role_id }}"
          secret_id: "{{ vault_secret_id }}"
        return_content: yes
        status_code: 200
        validate_certs: no
      register: vault_login
      no_log: true

    - name: Extract Vault token
      ansible.builtin.set_fact:
        vault_token: "{{ vault_login.json.auth.client_token }}"
      no_log: true

    - name: Read kubeconfig content
      ansible.builtin.slurp:
        src: "{{ temp_kubeconfig_path }}"
      register: kubeconfig_content
      no_log: true

    - name: Upload kubeconfig to Vault
      ansible.builtin.uri:
        url: "{{ vault_addr }}/v1/{{ vault_secret_path }}/data/{{ vault_cluster_name }}"
        method: POST
        headers:
          X-Vault-Token: "{{ vault_token }}"
        body_format: json
        body:
          data:
            kubeconfig: "{{ kubeconfig_content.content | b64decode }}"
            cluster_name: "{{ vault_cluster_name }}"
            api_server: "{{ ansible_host }}"
            cluster_type: "k3s"
            timestamp: "{{ ansible_date_time.iso8601 }}"
        return_content: yes
        status_code: 200
        validate_certs: no
      register: vault_upload
      no_log: true

    - name: Validate Vault upload
      ansible.builtin.assert:
        that:
          - vault_upload.json.data.created_time is defined
        fail_msg: "Failed to upload kubeconfig to Vault"

    - name: Clean up temporary kubeconfig file
      ansible.builtin.file:
        path: "{{ temp_kubeconfig_path }}"
        state: absent
      become: true

    - name: Show success message
      ansible.builtin.debug:
        msg: "Successfully uploaded kubeconfig for {{ vault_cluster_name }} to Vault"
